import React from 'react';
import { render } from '@testing-library/react';
import App from './App';

test('renders without crashing', () => {
  const { baseElement } = render(<App />);
  expect(baseElement).toBeDefined();
});
import { Redirect, Route } from 'react-router-dom';
import {
  IonApp,
  IonIcon,
  IonLabel,
  IonRouterOutlet,
  IonTabBar,
  IonTabButton,
  IonTabs,
  setupIonicReact
} from '@ionic/react';
import { IonReactRouter } from '@ionic/react-router';
import { ellipse, square, triangle } from 'ionicons/icons';
import Tab1 from './presentation/pages/Tab1';
import Tab2 from './presentation/pages/Tab2';
import Tab3 from './presentation/pages/Tab3';

/* Core CSS required for Ionic components to work properly */
import '@ionic/react/css/core.css';

/* Basic CSS for apps built with Ionic */
import '@ionic/react/css/normalize.css';
import '@ionic/react/css/structure.css';
import '@ionic/react/css/typography.css';

/* Optional CSS utils that can be commented out */
import '@ionic/react/css/padding.css';
import '@ionic/react/css/float-elements.css';
import '@ionic/react/css/text-alignment.css';
import '@ionic/react/css/text-transformation.css';
import '@ionic/react/css/flex-utils.css';
import '@ionic/react/css/display.css';

/**
 * Ionic Dark Mode
 * -----------------------------------------------------
 * For more info, please see:
 * https://ionicframework.com/docs/theming/dark-mode
 */

/* import '@ionic/react/css/palettes/dark.always.css'; */
/* import '@ionic/react/css/palettes/dark.class.css'; */
import '@ionic/react/css/palettes/dark.system.css';

/* Theme variables */
import './theme/variables.css';

setupIonicReact();

const App: React.FC = () => (
  <IonApp>
    <IonReactRouter>
      <IonTabs>
        <IonRouterOutlet>
          <Route exact path="/tab1">
            <Tab1 />
          </Route>
          <Route exact path="/tab2">
            <Tab2 />
          </Route>
          <Route path="/tab3">
            <Tab3 />
          </Route>
          <Route exact path="/">
            <Redirect to="/tab1" />
          </Route>
        </IonRouterOutlet>
        <IonTabBar slot="bottom">
          <IonTabButton tab="tab1" href="/tab1">
            <IonIcon aria-hidden="true" icon={triangle} />
            <IonLabel>Tab 1</IonLabel>
          </IonTabButton>
          <IonTabButton tab="tab2" href="/tab2">
            <IonIcon aria-hidden="true" icon={ellipse} />
            <IonLabel>Tab 2</IonLabel>
          </IonTabButton>
          <IonTabButton tab="tab3" href="/tab3">
            <IonIcon aria-hidden="true" icon={square} />
            <IonLabel>Tab 3</IonLabel>
          </IonTabButton>
        </IonTabBar>
      </IonTabs>
    </IonReactRouter>
  </IonApp>
);

export default App;
import { Camera, CameraResultType, CameraSource, Photo as CameraPhoto } from '@capacitor/camera';
import { Filesystem, Directory } from '@capacitor/filesystem';
import { Photo } from '../../domain/entities/Photo';

export async function takePhoto(): Promise<Photo> {  // Named export
  const photo = await Camera.getPhoto({
    resultType: CameraResultType.Uri,
    source: CameraSource.Camera,
    quality: 100,
  });

  const savedPhoto = await savePhoto(photo);
  return savedPhoto;
}

async function savePhoto(cameraPhoto: CameraPhoto): Promise<Photo> {
  const base64Data = await readAsBase64(cameraPhoto);

  const fileName = `${new Date().getTime()}.jpeg`;
  await Filesystem.writeFile({
    path: fileName,
    data: base64Data,
    directory: Directory.Data,
  });

  return {
    filepath: fileName,
    webviewPath: cameraPhoto.webPath,
  };
}

async function readAsBase64(photo: CameraPhoto): Promise<string> {
  const response = await fetch(photo.webPath!);
  const blob = await response.blob();
  return await convertBlobToBase64(blob);
}

function convertBlobToBase64(blob: Blob): Promise<string> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onerror = reject;
    reader.onload = () => {
      resolve(reader.result as string);
    };
    reader.readAsDataURL(blob);
  });
}
import { takePhoto } from "../services/PhotoService";  // Named import for takePhoto
import { PhotoRepository } from "../../domain/repositories/PhotoRepository";
import { Photo } from "../../domain/entities/Photo";

export class AddPhotoToGallery {
  constructor(private photoRepository: PhotoRepository) {}

  async execute(): Promise<Photo> {
    const newPhoto = await takePhoto();  // Directly use takePhoto
    await this.photoRepository.save(newPhoto);
    return newPhoto;
  }
}
import { PhotoRepository } from "../../domain/repositories/PhotoRepository";
import { Photo } from "../../domain/entities/Photo";

export class GetPhotos {
  constructor(private photoRepository: PhotoRepository) {}

  async execute(): Promise<Photo[]> {
    return await this.photoRepository.getAll();
  }
}
.container {
  text-align: center;
  position: absolute;
  left: 0;
  right: 0;
  top: 50%;
  transform: translateY(-50%);
}

.container strong {
  font-size: 20px;
  line-height: 26px;
}

.container p {
  font-size: 16px;
  line-height: 22px;
  color: #8c8c8c;
  margin: 0;
}

.container a {
  text-decoration: none;
}import './ExploreContainer.css';

interface ContainerProps {
  name: string;
}

const ExploreContainer: React.FC<ContainerProps> = ({ name }) => {
  return (
    <div className="container">
      <strong>{name}</strong>
      <p>Explore <a target="_blank" rel="noopener noreferrer" href="https://ionicframework.com/docs/components">UI Components</a></p>
    </div>
  );
};

export default ExploreContainer;
export interface Photo {
    filepath: string;
    webviewPath?: string;
  }
  import { Photo } from "../entities/Photo";

export interface PhotoRepository {
  save(photo: Photo): Promise<void>;
  getAll(): Promise<Photo[]>;
}
import { Photo } from "../../domain/entities/Photo";
import { PhotoRepository } from "../../domain/repositories/PhotoRepository";
import { Preferences } from '@capacitor/preferences';


const PHOTO_STORAGE_KEY = "photos";

export class LocalPhotoRepository implements PhotoRepository {
  async save(photo: Photo): Promise<void> {
    const photos = await this.getAll();
    photos.unshift(photo);  // AÃ±adir la nueva foto al principio
    await Preferences.set({
      key: 'myKey',
      value: 'myValue',
    });
  }

  async getAll(): Promise<Photo[]> {
    const { value } = await Preferences.get({ key: 'myKey' });
    return value ? JSON.parse(value) : [];
  }
}
import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';

const container = document.getElementById('root');
const root = createRoot(container!);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);import React from 'react';
import { IonFab, IonFabButton, IonIcon } from '@ionic/react';
import { camera } from 'ionicons/icons';

interface AddPhotoButtonProps {
  onClick: () => void;
}

const AddPhotoButton: React.FC<AddPhotoButtonProps> = ({ onClick }) => {
  return (
    <IonFab vertical="bottom" horizontal="center" slot="fixed">
      <IonFabButton onClick={onClick}>
        <IonIcon icon={camera} />
      </IonFabButton>
    </IonFab>
  );
};

export default AddPhotoButton;
import React from 'react';
import { IonGrid, IonRow, IonCol, IonImg } from '@ionic/react';
import { Photo } from '../../domain/entities/Photo';

interface PhotoGalleryProps {
  photos: Photo[];
}

const PhotoGallery: React.FC<PhotoGalleryProps> = ({ photos }) => {
  return (
    <IonGrid>
      <IonRow>
        {photos.map((photo, index) => (
          <IonCol size="6" key={index}>
            <IonImg src={photo.webviewPath} />
          </IonCol>
        ))}
      </IonRow>
    </IonGrid>
  );
};

export default PhotoGallery;
import React from 'react';
import { IonImg } from '@ionic/react';
import { Photo } from '../../domain/entities/Photo';

interface PhotoItemProps {
  photo: Photo;
}

const PhotoItem: React.FC<PhotoItemProps> = ({ photo }) => {
  return <IonImg src={photo.webviewPath} />;
};

export default PhotoItem;
import React, { useState } from 'react';
import { IonContent, IonHeader, IonPage, IonTitle, IonToolbar, IonFab, IonFabButton, IonIcon, IonGrid, IonRow, IonCol, IonImg } from '@ionic/react';
import { camera } from 'ionicons/icons';
import { takePhoto, UserPhoto } from '../../application/services/PhotoService';
import './Tab1.css';

const Tab1: React.FC = () => {
  const [photos, setPhotos] = useState<UserPhoto[]>([]);

  const addPhotoToGallery = async () => {
    const newPhoto = await takePhoto();
    setPhotos([newPhoto, ...photos]);
  };

  return (
    <IonPage>
      <IonHeader>
        <IonToolbar>
          <IonTitle>Photo Gallery</IonTitle>
        </IonToolbar>
      </IonHeader>
      <IonContent fullscreen>
        <IonGrid>
          <IonRow>
            {photos.map((photo, index) => (
              <IonCol size="6" key={index}>
                <IonImg src={photo.webviewPath} />
              </IonCol>
            ))}
          </IonRow>
        </IonGrid>
        <IonFab vertical="bottom" horizontal="center" slot="fixed">
          <IonFabButton onClick={addPhotoToGallery}>
            <IonIcon icon={camera}></IonIcon>
          </IonFabButton>
        </IonFab>
      </IonContent>
    </IonPage>
  );
};

export default Tab1;import { IonContent, IonHeader, IonPage, IonTitle, IonToolbar } from '@ionic/react';
import ExploreContainer from '../../components/ExploreContainer';
import './Tab2.css';

const Tab2: React.FC = () => {
  return (
    <IonPage>
      <IonHeader>
        <IonToolbar>
          <IonTitle>Tab 2</IonTitle>
        </IonToolbar>
      </IonHeader>
      <IonContent fullscreen>
        <IonHeader collapse="condense">
          <IonToolbar>
            <IonTitle size="large">Tab 2</IonTitle>
          </IonToolbar>
        </IonHeader>
        <ExploreContainer name="Tab 2 page" />
      </IonContent>
    </IonPage>
  );
};

export default Tab2;import { IonContent, IonHeader, IonPage, IonTitle, IonToolbar } from '@ionic/react';
import ExploreContainer from '../../components/ExploreContainer';
import './Tab3.css';

const Tab3: React.FC = () => {
  return (
    <IonPage>
      <IonHeader>
        <IonToolbar>
          <IonTitle>Tab 3</IonTitle>
        </IonToolbar>
      </IonHeader>
      <IonContent fullscreen>
        <IonHeader collapse="condense">
          <IonToolbar>
            <IonTitle size="large">Tab 3</IonTitle>
          </IonToolbar>
        </IonHeader>
        <ExploreContainer name="Tab 3 page" />
      </IonContent>
    </IonPage>
  );
};

export default Tab3;import React from 'react';
import { Route, Redirect } from 'react-router-dom';
import Tab1 from '../pages/Tab1';

const AppRoutes: React.FC = () => (
  <>
    <Route path="/tab1" component={Tab1} exact={true} />
    <Redirect exact from="/" to="/tab1" />
  </>
);

export default AppRoutes;
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom/extend-expect';

// Mock matchmedia
window.matchMedia = window.matchMedia || function() {
  return {
      matches: false,
      addListener: function() {},
      removeListener: function() {}
  };
};
/* For information on how to create your own theme, please see:
http://ionicframework.com/docs/theming/ */
/// <reference types="vite/client" />
