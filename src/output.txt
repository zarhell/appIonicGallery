File: ./App.test.tsx
import React from 'react';
import { render } from '@testing-library/react';
import App from './App';

test('renders without crashing', () => {
  const { baseElement } = render(<App />);
  expect(baseElement).toBeDefined();
});
File: ./App.tsx
import { Route, Redirect } from 'react-router-dom';
import { IonApp, IonRouterOutlet, setupIonicReact } from '@ionic/react';
import { IonReactRouter } from '@ionic/react-router';
import AppRoutes from './presentation/routes/AppRoutes';

/* Core CSS required for Ionic components to work properly */
import '@ionic/react/css/core.css';

/* Basic CSS for apps built with Ionic */
import '@ionic/react/css/normalize.css';
import '@ionic/react/css/structure.css';
import '@ionic/react/css/typography.css';

/* Optional CSS utils that can be commented out */
import '@ionic/react/css/padding.css';
import '@ionic/react/css/float-elements.css';
import '@ionic/react/css/text-alignment.css';
import '@ionic/react/css/text-transformation.css';
import '@ionic/react/css/flex-utils.css';
import '@ionic/react/css/display.css';

/* Theme variables */
import './theme/variables.css';

setupIonicReact();

const App: React.FC = () => (
  <IonApp>
    <IonReactRouter>
      <IonRouterOutlet>
        <AppRoutes />
        <Route exact path="/">
          <Redirect to="/register-patient" />
        </Route>
      </IonRouterOutlet>
    </IonReactRouter>
  </IonApp>
);

export default App;
File: ./application/services/AuthService.ts
export class AuthService {
    private static isAuthenticated = false;
  
    static login(username: string, password: string): boolean {
      if (username === 'user' && password === '123') {
        this.isAuthenticated = true;
        return true;
      }
      return false;
    }
  
    static logout(): void {
      this.isAuthenticated = false;
    }
  
    static isLoggedIn(): boolean {
      return this.isAuthenticated;
    }
  }
  File: ./application/services/GeolocationService.ts
import { Geolocation } from '@capacitor/geolocation';

export interface Location {
  latitude: number;
  longitude: number;
}

export class GeolocationService {
  static async getCurrentLocation(): Promise<Location | null> {
    try {
      const position = await Geolocation.getCurrentPosition();
      return {
        latitude: position.coords.latitude,
        longitude: position.coords.longitude,
      };
    } catch (error) {
      console.error('Error getting location from GPS:', error);
      return null;
    }
  }
}
File: ./application/services/LocalStorageService.ts
import { Preferences } from '@capacitor/preferences';

export class LocalStorageService {
  
  static async saveData(key: string, data: any): Promise<void> {
    await Preferences.set({
      key: key,
      value: JSON.stringify(data),
    });
  }


  static async getData(key: string): Promise<any | null> {
    const { value } = await Preferences.get({ key: key });
    return value ? JSON.parse(value) : null;
  }


  static async removeData(key: string): Promise<void> {
    await Preferences.remove({ key: key });
  }


  static async clearStorage(): Promise<void> {
    await Preferences.clear();
  }
}
File: ./application/services/PhotoService.ts
import { Camera, CameraResultType, CameraSource, Photo as CameraPhoto } from '@capacitor/camera';
import { Filesystem, Directory } from '@capacitor/filesystem';
import { Photo } from '../../domain/entities/Photo';

export async function takePhoto(): Promise<Photo> {
  const photo = await Camera.getPhoto({
    resultType: CameraResultType.Uri,
    source: CameraSource.Camera,
    quality: 100,
  });

  const savedPhoto = await savePhoto(photo);
  return savedPhoto;
}

async function savePhoto(cameraPhoto: CameraPhoto): Promise<Photo> {
  const base64Data = await readAsBase64(cameraPhoto);

  const fileName = `${new Date().getTime()}.jpeg`;
  await Filesystem.writeFile({
    path: fileName,
    data: base64Data,
    directory: Directory.Data,
  });

  return {
    filepath: fileName,
    webviewPath: cameraPhoto.webPath,
  };
}

async function readAsBase64(photo: CameraPhoto): Promise<string> {
  const response = await fetch(photo.webPath!);
  const blob = await response.blob();
  return await convertBlobToBase64(blob);
}

function convertBlobToBase64(blob: Blob): Promise<string> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onerror = reject;
    reader.onload = () => {
      resolve(reader.result as string);
    };
    reader.readAsDataURL(blob);
  });
}
File: ./application/use-cases/AddPhotoToGallery.ts
import { takePhoto } from "../services/PhotoService";  // Named import for takePhoto
import { PhotoRepository } from "../../domain/repositories/PhotoRepository";
import { Photo } from "../../domain/entities/Photo";

export class AddPhotoToGallery {
  constructor(private photoRepository: PhotoRepository) {}

  async execute(): Promise<Photo> {
    const newPhoto = await takePhoto();
    await this.photoRepository.save(newPhoto);
    return newPhoto;
  }
}
File: ./application/use-cases/GetPhotos.ts
import { PhotoRepository } from "../../domain/repositories/PhotoRepository";
import { Photo } from "../../domain/entities/Photo";

export class GetPhotos {
  constructor(private photoRepository: PhotoRepository) {}

  async execute(): Promise<Photo[]> {
    return await this.photoRepository.getAll();
  }
}
File: ./components/ExploreContainer.css
.container {
  text-align: center;
  position: absolute;
  left: 0;
  right: 0;
  top: 50%;
  transform: translateY(-50%);
}

.container strong {
  font-size: 20px;
  line-height: 26px;
}

.container p {
  font-size: 16px;
  line-height: 22px;
  color: #8c8c8c;
  margin: 0;
}

.container a {
  text-decoration: none;
}File: ./components/ExploreContainer.tsx
import './ExploreContainer.css';

interface ContainerProps {
  name: string;
}

const ExploreContainer: React.FC<ContainerProps> = ({ name }) => {
  return (
    <div className="container">
      <strong>{name}</strong>
      <p>Explore <a target="_blank" rel="noopener noreferrer" href="https://ionicframework.com/docs/components">UI Components</a></p>
    </div>
  );
};

export default ExploreContainer;
File: ./components/MapComponent.tsx
import React, { useState } from 'react';
import { MapContainer, TileLayer, Marker, useMapEvents } from 'react-leaflet';
import 'leaflet/dist/leaflet.css'; // Importamos los estilos de Leaflet
import L from 'leaflet';

// Actualización del icono por defecto en Leaflet
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',
  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',
});

interface Location {
  latitude: number;
  longitude: number;
}

interface MapComponentProps {
  onLocationSelect: (location: Location) => void;
}   

const MapComponent: React.FC<MapComponentProps> = ({ onLocationSelect }) => {
  const [position, setPosition] = useState<Location | null>(null);

  const MapClickHandler = () => {
    useMapEvents({
      click(e) {
        const newPosition = {
          latitude: e.latlng.lat,
          longitude: e.latlng.lng,
        };
        setPosition(newPosition);
        onLocationSelect(newPosition); // Pasar la ubicación seleccionada al componente padre
      },
    });
    return position ? <Marker position={[position.latitude, position.longitude]}></Marker> : null;
  };

  return (
    <MapContainer center={[51.505, -0.09]} zoom={13} style={{ height: '400px', width: '100%' }}>
      <TileLayer
        url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      />
      <MapClickHandler />
    </MapContainer>
  );
};

export default MapComponent;
File: ./domain/entities/Photo.ts
export interface Photo {
    filepath: string;
    webviewPath?: string;
  }
  File: ./domain/repositories/PhotoRepository.ts
import { Photo } from "../entities/Photo";

export interface PhotoRepository {
  save(photo: Photo): Promise<void>;
  getAll(): Promise<Photo[]>;
}
File: ./infrastructure/api/LocalPhotoRepository.ts
import { Photo } from "../../domain/entities/Photo";
import { PhotoRepository } from "../../domain/repositories/PhotoRepository";
import { Preferences } from '@capacitor/preferences';


const PHOTO_STORAGE_KEY = "photos";

export class LocalPhotoRepository implements PhotoRepository {
  async save(photo: Photo): Promise<void> {
    const photos = await this.getAll();
    photos.unshift(photo);  // Añadir la nueva foto al principio
    await Preferences.set({
      key: 'myKey',
      value: 'myValue',
    });
  }

  async getAll(): Promise<Photo[]> {
    const { value } = await Preferences.get({ key: 'myKey' });
    return value ? JSON.parse(value) : [];
  }
}
File: ./main.tsx
import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';

const container = document.getElementById('root');
const root = createRoot(container!);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);File: ./presentation/components/AddPhotoButton.tsx
import React from 'react';
import { IonFab, IonFabButton, IonIcon } from '@ionic/react';
import { camera } from 'ionicons/icons';

interface AddPhotoButtonProps {
  onClick: () => void;
}

const AddPhotoButton: React.FC<AddPhotoButtonProps> = ({ onClick }) => {
  return (
    <IonFab vertical="bottom" horizontal="center" slot="fixed">
      <IonFabButton onClick={onClick}>
        <IonIcon icon={camera} />
      </IonFabButton>
    </IonFab>
  );
};

export default AddPhotoButton;
File: ./presentation/components/HeaderMenu.tsx
import React from 'react';
import { IonHeader, IonToolbar, IonTitle, IonButtons, IonButton, IonIcon, IonMenu } from '@ionic/react';
import { menuOutline } from 'ionicons/icons';
import { useHistory } from 'react-router-dom';

const HeaderMenu: React.FC = () => {
  const history = useHistory();

  const navigateTo = (path: string) => {
    history.push(path);
  };

  return (
    <>
      <IonHeader>
        <IonToolbar>
          <IonTitle>Gestión de Pacientes</IonTitle>
          <IonButtons slot="end">
            <IonButton>
              <IonIcon icon={menuOutline} />
            </IonButton>
          </IonButtons>
        </IonToolbar>
      </IonHeader>

      <IonMenu contentId="main-content">
        <IonButtons>
          <IonButton onClick={() => navigateTo('/register-patient')}>
            Registrar Paciente
          </IonButton>
          <IonButton onClick={() => navigateTo('/registered-patients')}>
            Pacientes Registrados
          </IonButton>
        </IonButtons>
      </IonMenu>
    </>
  );
};

export default HeaderMenu;
File: ./presentation/components/PhotoGallery.tsx
import React from 'react';
import { IonGrid, IonRow, IonCol, IonImg } from '@ionic/react';
import { Photo } from '../../domain/entities/Photo';

interface PhotoGalleryProps {
  photos: Photo[];
}

const PhotoGallery: React.FC<PhotoGalleryProps> = ({ photos }) => {
  return (
    <IonGrid>
      <IonRow>
        {photos.map((photo, index) => (
          <IonCol size="6" key={index}>
            <IonImg src={photo.webviewPath} />
          </IonCol>
        ))}
      </IonRow>
    </IonGrid>
  );
};

export default PhotoGallery;
File: ./presentation/components/PhotoItem.tsx
import React from 'react';
import { IonImg } from '@ionic/react';
import { Photo } from '../../domain/entities/Photo';

interface PhotoItemProps {
  photo: Photo;
}

const PhotoItem: React.FC<PhotoItemProps> = ({ photo }) => {
  return <IonImg src={photo.webviewPath} />;
};

export default PhotoItem;
File: ./presentation/hoc/withPhotoRepository.tsx
import React from 'react';
import { LocalPhotoRepository } from '../../infrastructure/api/LocalPhotoRepository';

const withPhotoRepository = (WrappedComponent: React.ComponentType<any>) => {
  return (props: any) => <WrappedComponent {...props} photoRepository={new LocalPhotoRepository()} />;
};

export default withPhotoRepository;
File: ./presentation/pages/Login.tsx
import React, { useState } from 'react';
import { IonButton, IonContent, IonInput, IonPage, IonTitle, IonToolbar, IonHeader, IonToast } from '@ionic/react';
import { useHistory } from 'react-router-dom';
import { AuthService } from '../../application/services/AuthService';

const Login: React.FC = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [showToast, setShowToast] = useState(false);
  const history = useHistory();

  const handleLogin = () => {
    if (AuthService.login(username, password)) {
      history.push('/register-patient');
    } else {
      setShowToast(true);
    }
  };

  return (
    <IonPage>
      <IonHeader>
        <IonToolbar>
          <IonTitle>Login</IonTitle>
        </IonToolbar>
      </IonHeader>
      <IonContent>
        <IonInput
          value={username}
          placeholder="Username"
          onIonChange={(e: CustomEvent) => setUsername(e.detail.value!)}
          clearInput
        />
        <IonInput
          value={password}
          type="password"
          placeholder="Password"
          onIonChange={(e: CustomEvent) => setPassword(e.detail.value!)}
          clearInput
        />
        <IonButton expand="block" onClick={handleLogin}>
          Login
        </IonButton>
        <IonToast
          isOpen={showToast}
          onDidDismiss={() => setShowToast(false)}
          message="Invalid credentials."
          duration={2000}
        />
      </IonContent>
    </IonPage>
  );
};

export default Login;
File: ./presentation/pages/MainPage.tsx
import React from 'react';
import { IonPage, IonContent, IonButton, IonHeader, IonToolbar, IonTitle } from '@ionic/react';
import { useHistory } from 'react-router-dom';

const MainPage: React.FC = () => {
  const history = useHistory();

  const handleNavigate = (path: string) => {
    history.push(path);
  };

  return (
    <IonPage>
      <IonHeader>
        <IonToolbar>
          <IonTitle>Opciones de la Aplicación</IonTitle>
        </IonToolbar>
      </IonHeader>
      <IonContent className="ion-padding">
        <IonButton expand="block" onClick={() => handleNavigate('/register-patient')}>
          Registrar Paciente
        </IonButton>
        <IonButton expand="block" onClick={() => handleNavigate('/registered-patients')}>
          Gestionar Pacientes Registrados
        </IonButton>
      </IonContent>
    </IonPage>
  );
};

export default MainPage;
File: ./presentation/pages/MapPage.tsx
import React, { useState, useEffect } from 'react';
import { IonPage, IonHeader, IonToolbar, IonTitle, IonContent, IonButton } from '@ionic/react';
import { MapContainer, TileLayer, Marker, useMapEvents } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import L from 'leaflet';

interface Location {
  latitude: number;
  longitude: number;
}

const MapPage: React.FC = () => {
  const [selectedLocation, setSelectedLocation] = useState<Location | null>(null);
  const [initialLocation, setInitialLocation] = useState<Location>({ latitude: 51.505, longitude: -0.09 });

  const MapClickHandler = () => {
    useMapEvents({
      click(e) {
        const location = {
          latitude: e.latlng.lat,
          longitude: e.latlng.lng,
        };
        setSelectedLocation(location);
      },
    });
    return selectedLocation ? <Marker position={[selectedLocation.latitude, selectedLocation.longitude]}></Marker> : null;
  };

  return (
    <IonPage>
      <IonHeader>
        <IonToolbar>
          <IonTitle>Seleccionar Ubicación en el Mapa</IonTitle>
        </IonToolbar>
      </IonHeader>
      <IonContent>
        <MapContainer center={[initialLocation.latitude, initialLocation.longitude]} zoom={13} style={{ height: '400px', width: '100%' }}>
          <TileLayer
            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          />
          <MapClickHandler />
        </MapContainer>
        <IonButton expand="block">
          Confirmar Ubicación
        </IonButton>
      </IonContent>
    </IonPage>
  );
};

export default MapPage;
File: ./presentation/pages/RegisteredPatients.tsx
// File: ./pages/RegisteredPatients.tsx
import React, { useEffect, useState } from 'react';
import { IonPage, IonContent, IonList, IonItem, IonLabel, IonHeader, IonToolbar, IonTitle } from '@ionic/react';
import { LocalStorageService } from '../../application/services/LocalStorageService';

const RegisteredPatients: React.FC = () => {
  const [patients, setPatients] = useState<any[]>([]);

  useEffect(() => {
    const fetchPatients = async () => {
      const savedPatients = await LocalStorageService.getData('patients');
      setPatients(savedPatients || []);
    };
    fetchPatients();
  }, []);

  return (
    <IonPage>
      <IonHeader>
        <IonToolbar>
          <IonTitle>Pacientes Registrados</IonTitle>
        </IonToolbar>
      </IonHeader>
      <IonContent>
        <IonList>
          {patients.map((patient, index) => (
            <IonItem key={index}>
              <IonLabel>
                {patient.name} - {patient.age} años
              </IonLabel>
            </IonItem>
          ))}
        </IonList>
      </IonContent>
    </IonPage>
  );
};

export default RegisteredPatients;
File: ./presentation/pages/RegisterPatient.tsx
import React, { useState, useEffect } from 'react';
import { IonButton, IonContent, IonInput, IonPage, IonTitle, IonToolbar, IonHeader, IonItem, IonLabel, IonImg, IonGrid, IonRow, IonCol } from '@ionic/react';
import { LocalPhotoRepository } from '../../infrastructure/api/LocalPhotoRepository';
import { Photo } from '../../domain/entities/Photo';
import { LocalStorageService } from '../../application/services/LocalStorageService';

interface RegisterPatientProps {
  photoRepository: LocalPhotoRepository;
}

const RegisterPatient: React.FC<RegisterPatientProps> = ({ photoRepository }) => {
  const [name, setName] = useState('');
  const [age, setAge] = useState('');
  const [photos, setPhotos] = useState<Photo[]>([]);

  useEffect(() => {
    const loadFormData = async () => {
      const savedData = await LocalStorageService.getData('patientForm');
      if (savedData) {
        setName(savedData.name || '');
        setAge(savedData.age || '');
        setPhotos(savedData.photos || []);
      }
    };
    loadFormData();
  }, []);

  const handleTakePhoto = async () => {
    const newPhoto = await photoRepository.save({
      filepath: 'photo-path',
      webviewPath: 'webview-path',
    });
    setPhotos([...photos, newPhoto]);
  };

  const handleSubmit = async () => {
    const formData = {
      name,
      age,
      photos,
    };
    await LocalStorageService.saveData('patientForm', formData);
  };

  return (
    <IonPage>
      <IonHeader>
        <IonToolbar>
          <IonTitle>Registrar Paciente</IonTitle>
        </IonToolbar>
      </IonHeader>
      <IonContent>
        <IonItem>
          <IonLabel position="stacked">Nombre</IonLabel>
          <IonInput
            value={name}
            placeholder="Nombre"
            onIonChange={(e: CustomEvent) => setName(e.detail.value!)}
          />
        </IonItem>

        <IonItem>
          <IonLabel position="stacked">Edad</IonLabel>
          <IonInput
            value={age}
            type="number"
            placeholder="Edad"
            onIonChange={(e: CustomEvent) => setAge(e.detail.value!)}
          />
        </IonItem>

        <IonButton expand="block" onClick={handleTakePhoto}>
          Tomar Foto
        </IonButton>

        {/* Mostrar las fotos tomadas */}
        <IonGrid>
          <IonRow>
            {photos.map((photo, index) => (
              <IonCol size="6" key={index}>
                <IonImg src={photo.webviewPath} />
              </IonCol>
            ))}
          </IonRow>
        </IonGrid>

        <IonButton expand="block" onClick={handleSubmit}>
          Enviar
        </IonButton>
      </IonContent>
    </IonPage>
  );
};

export default RegisterPatient;
File: ./presentation/routes/AppRoutes.tsx
import React from 'react';
import { Route, Redirect } from 'react-router-dom';
import RegisterPatient from '../pages/RegisterPatient';
import RegisteredPatients from '../pages/RegisteredPatients';
import MainPage from '../pages/MainPage';
import Login from '../pages/Login';
import MapPage from '../pages/MapPage';
import { AuthService } from '../../application/services/AuthService';
import withPhotoRepository from '../hoc/withPhotoRepository';
import { LocalPhotoRepository } from '../../infrastructure/api/LocalPhotoRepository';

const AppRoutes: React.FC = () => (
  <>
    {/* Default route: Redirect to login if not authenticated */}
    <Route path="/" exact render={() => <Redirect to="/login" />} />

    {/* Login Route */}
    <Route path="/login" exact component={Login} />

    {/* Registrar Paciente */}
    <Route
      path="/register-patient"
      render={(props) =>
        AuthService.isLoggedIn() ? (
          <RegisterPatient {...props} photoRepository={new LocalPhotoRepository()} />
        ) : (
          <Redirect to="/login" />
        )
      }
      exact
    />

    {/* Pacientes Registrados */}
    <Route
      path="/registered-patients"
      component={AuthService.isLoggedIn() ? RegisteredPatients : MainPage}
      exact
    />

    {/* Map Page */}
    <Route path="/map" component={MapPage} exact />
  </>
);

export default AppRoutes;
File: ./setupTests.ts
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom/extend-expect';

// Mock matchmedia
window.matchMedia = window.matchMedia || function() {
  return {
      matches: false,
      addListener: function() {},
      removeListener: function() {}
  };
};
File: ./theme/variables.css
/* For information on how to create your own theme, please see:
http://ionicframework.com/docs/theming/ */
File: ./vite-env.d.ts
/// <reference types="vite/client" />


File: ./App.tsx
import { Route, Redirect } from 'react-router-dom';
import { IonApp, IonRouterOutlet, setupIonicReact } from '@ionic/react';
import { IonReactRouter } from '@ionic/react-router';
import AppRoutes from './presentation/routes/AppRoutes';

/* Core CSS required for Ionic components to work properly */
import '@ionic/react/css/core.css';

/* Basic CSS for apps built with Ionic */
import '@ionic/react/css/normalize.css';
import '@ionic/react/css/structure.css';
import '@ionic/react/css/typography.css';

/* Optional CSS utils that can be commented out */
import '@ionic/react/css/padding.css';
import '@ionic/react/css/float-elements.css';
import '@ionic/react/css/text-alignment.css';
import '@ionic/react/css/text-transformation.css';
import '@ionic/react/css/flex-utils.css';
import '@ionic/react/css/display.css';

/* Theme variables */
import './theme/variables.css';

setupIonicReact();

const App: React.FC = () => (
  <IonApp>
    <IonReactRouter>
      <IonRouterOutlet>
        <AppRoutes />
        <Route exact path="/">
          <Redirect to="/register-patient" />
        </Route>
      </IonRouterOutlet>
    </IonReactRouter>
  </IonApp>
);

export default App;
